generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
           
model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  passwordHash String         // Store hashed passwords, not plain text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  watchEntries WatchEntry[]
  chatMessages ChatMessage[]
}

model Movie {
  id          String   @id @default(cuid())
  title       String
  year        Int?
  imdbId      String?  @unique(map: "Movie_imdbId_key") // Make imdbId unique for easier upserts
  tmdbId      Int?     @unique(map: "Movie_tmdbId_key") // Make tmdbId unique
  poster      String?
  genre       Json // Changed from String[] to Json for compatibility
  director    String?
  actors      Json // Changed from String[] to Json for compatibility
  plot        String?
  runtime     Int?
  imdbRating  Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  watchEntries WatchEntry[]
}

model WatchEntry {
  id            String   @id @default(cuid())
  movieId       String
  watchDate     DateTime
  personalRating Int? // Changed from @db.SmallInt to standard Int?
  personalNotes String?
  mood          String?
  location      String?
  rewatched     Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  userId         String // Link watch entry to a user
  user           User           @relation(fields: [userId], references: [id])
  
  @@unique([movieId, watchDate, userId]) // A user can only watch a specific movie on a specific date once
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String   // 'user' or 'assistant'
  context   Json?    // movie context for AI
  createdAt DateTime @default(now())

  userId         String // Link chat message to a user
  user           User           @relation(fields: [userId], references: [id])
}